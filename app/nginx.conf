
#user  PointMountain; # 设置运行此ngnix的用户名
worker_processes  4; # 工作进程数 对应cpu核数

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log  logs/error.log warn; # 指定错误日志的路径 日志的格式

pid        logs/nginx.pid; # 存放当前nginx进程号的文件


events {
    worker_connections  1024; # 工作进程最大的连接数
}


http {
    include       mime.types; # 包含内容类型和文件名后缀的对应关系
    default_type  application/octet-stream; # 默认的Content-Type

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'; # 定义一个日志格式main

    #log_format  main2 '$arg_name - $http_host - $sent_http_date';

    access_log  logs/access.log  main; # 指定访问日志的存放位置 格式为main

    sendfile        on; # 零拷贝模式
    tcp_nopush     on; # TCP不直接推 有一定的缓存
    #tcp_nodelay    on; # TCP不缓存 提高网络包传输实时性

    #keepalive_timeout  0;
    keepalive_timeout  65; # 活动链接超时时间

    gzip  on; # 是否启用压缩

    # 请求限制
    limit_req_zone $binary_remote_addr zone=req_zone:10m rate=1r/s; # 根据$binary_remote_addr进行限制 内存空间起名req_zone大小为10m 每秒请求一次

    # 连接限制
    limit_conn_zone $binary_remote_addr zone=conn_zone:10m;
    # $binary_remote_addr 表示远程的ip地址
    server { # 每个对应一个网站
        listen       80; # 监听的端口号
        server_name  localhost; # 域名

        #charset koi8-r; # 指定字符集

        #access_log  logs/host.access.log  main;

        location / { # 匹配所有的路径
            root   html; # 静态文件根目录
            index  index.html index.htm; # 索引文档
            # 缓存区队列burst=3 不延期 即每秒最多可处理rate + burst个 同时处理rate个
            limit_req zone=req_zone burst=3 nodelay;
            limit_conn conn_zone 1; # 限定每秒一个连接
        }

        location ~ ^/api {
            proxy_pass  http://localhost:3000;
        }

        location ~ .*\.(jpg|png|gif)$ {
            gzip  off;
            root  images;
            expires 30s;
        }

        location ~ .*\.(html|js|css)$ {
            gzip  on;
            gzip_min_length   1k;  #需要压缩的最小大小
            gzip_http_version 1.1; #需要压缩的http请求版本
            gzip_comp_level   9;   #压缩级别 数字越大压缩越厉害
            gzip_types        text/css application/javascript;
            root  html;
        }

        location ~ .*\.json$ {
            add_header Access-Control-Allow-Origin http://localhost:3000;
            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;
            root json;
        }

        location ~ ^/download {
            gzip_static on; # 适用于在服务端提前压缩好的文件 会优先寻找后缀为.gz的文件
            tcp_nopush  on;
            root        \/;
        }
        # location / {
        #     root       html;
        #     random_index on; # 随机选取一个页面展示
        # }

        # location / {
        #     root   html;
        #     index  index.html index.htm;
        #     sub_filter 'world' 'zhufeng'; # 替换内容
        #     sub_filter_once off; # 替换一次还是全部替换
        # }

        location = /status {
            stub_status on; # 监控客户端状态
        }

        #error_page  404              /404.html; # 错误页面 如果返回的状态码是404会重定向到/404.html

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html; # 把服务端错误状态码重定向到50x.html
        location = /50x.html { # 当前路径是/50x.html的话，是根路径下的50x.html
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        # 如果访问的文件名是.php结尾的话，会把此请求转发给http://127.0.0.1
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        # 如果访问的文件名是.php结尾的话，会把此请求转发给http://127.0.0.1:9000
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        # 如果路径是/.ht的话，deny all 禁止所有人访问
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
